import { useEffect, useState } from 'react';
import {
    Box,
    Button,
    ButtonGroup,
    Flex,
    Input,
    useColorMode
} from '@chakra-ui/react';
import Head from 'next/head';
import {
    Connector,
    useAccount,
    useConnect,
    useContract,
    useSigner} from 'wagmi';
import { ZeroWalletSigner } from 'zero-wallet-wagmi-connector';
import { contractAbi, contractAddress } from '../src/constants/contract';
import Projects from '../src/components/Projects';

export default function Home() {
    // state
    const [newNumber, setNewNumber] = useState<string>('');
    const [contractNumber, setContractNumber] = useState<number | null>(null);

    // wagmi hooks
    const { address } = useAccount();
    const { data: signer } = useSigner<ZeroWalletSigner>();
    const { connect, connectors } = useConnect();
    const contract = useContract({
        address: contractAddress,
        abi: contractAbi,
        signerOrProvider: signer
    });

    // recovery
    const [inited, setInited] = useState(false);
    const [loading, setLoading] = useState(false);

    // chakra hooks
    const { setColorMode } = useColorMode();
    useEffect(() => {
        setColorMode('dark');
        // @ts-ignore
    }, []);

    useEffect(() => {
        const func = async () => {
            if (signer && contract) {
                try {
                    await signer.authorize();
                } catch { }

                try {
                    await signer.deployScw();
                } catch { }

                const newContractNumber = await contract.value();
                setContractNumber(parseInt(newContractNumber));
                signer.recoveryReadyPromise?.then(() => {
                    setInited(true);
                });
            }
        };

        func();
    }, [signer, contract]);

    const handleConnect = async (connector: Connector) => {
        connect({ connector: connector });
    };

    return (
        <Flex
            justifyContent="center"
            alignItems="center"
            dir="c"
            h="100vh"
            w="100vw"
        >
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {!signer ? (
                <ButtonGroup>
                    {connectors.map((connector, index) => (
                        <Button
                            key={index}
                            onClick={() => handleConnect(connector)}
                        >
                            Connect {connector.name}
                        </Button>
                    ))}
                </ButtonGroup>
            ) : (
                <Projects />
            )}
        </Flex>
    );
}
