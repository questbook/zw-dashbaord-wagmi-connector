import { useContext, useEffect, useState } from 'react';
import {
    Box,
    Button,
    ButtonGroup,
    Flex,
    Input,
    useColorMode
} from '@chakra-ui/react';
import Head from 'next/head';
import {
    Connector,
    useAccount,
    useConnect,
    useContract,
    useSigner
} from 'wagmi';
import { ZeroWalletSigner } from 'zero-wallet-wagmi-connector';
import { contractAbi, contractAddress } from '../src/constants/contract';

export default function Home() {
    // state
    const [newNumber, setNewNumber] = useState<string>('');
    const [contractNumber, setContractNumber] = useState<number | null>(null);

    // wagmi hooks
    const { address } = useAccount();
    const { data: signer } = useSigner<ZeroWalletSigner>();
    const { connect, connectors } = useConnect();
    // console.log(contractAddress, contractAbi, signer)
    const contract = useContract({
        address: contractAddress,
        abi: contractAbi,
        signerOrProvider: signer
    });

    // chakra hooks
    const { setColorMode } = useColorMode();
    useEffect(() => {
        setColorMode('dark');
        // @ts-ignore
    }, []);

    useEffect(() => {
        const func = async () => {
            await authorizeAndDeploy();
            await updateContractNumber();
        }
        func()
    }, [signer, contract]);

    useEffect(() => {
        console.log("scwAddress", signer?.scwAddress);
    }, [signer?.scwAddress])

    const handleConnect = async (connector: Connector) => {
        connect({ connector: connector });
    };

    const authorizeAndDeploy = async () => {
        if (signer) {
            try {
                await signer.authorize();
            } catch { }

            try {
                await signer.deployScw();
            } catch { }
        }
    }

    const updateContractNumber = async () => {
        if (!contract || !signer) return;
        const newContractNumber = await contract.value();
        setContractNumber(parseInt(newContractNumber));
    };

    const handleSetNumber = async () => {
        if (!contract) return;
        const tx = await contract.set(parseInt(newNumber));
        await tx?.wait();
        await updateContractNumber();
    };

    return (
        <Flex
            justifyContent="center"
            alignItems="center"
            dir="c"
            h="100vh"
            w="100vw"
        >
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {!signer ? (
                <ButtonGroup>
                    {connectors.map((connector, index) => (
                        <Button
                            key={index}
                            onClick={() => handleConnect(connector)}
                        >
                            Connect {connector.name}
                        </Button>
                    ))}
                </ButtonGroup>
            ) : (
                <Flex alignItems="center" direction="column" gap={5}>
                    <Box>
                        Storage value:{' '}
                        {contractNumber ? contractNumber : 'loading...'}
                    </Box>
                    <Box>
                        Your SCW address: {signer.scwAddress}
                        <br />
                        Your zero wallet address: {address}
                    </Box>
                    <Flex gap={2}>
                        <Input
                            type="number"
                            value={newNumber}
                            onChange={(e) => setNewNumber(e.target.value)}
                        />
                        <Button onClick={handleSetNumber} padding="5">
                            Set Number
                        </Button>
                    </Flex>
                </Flex>
            )}
        </Flex>
    );
}
