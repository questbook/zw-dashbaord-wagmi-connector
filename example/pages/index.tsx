import { Fragment, useContext, useEffect, useState } from 'react';
import {
    Box,
    Button,
    ButtonGroup,
    Flex,
    Input,
    useColorMode
} from '@chakra-ui/react';
import Head from 'next/head';
import {
    Connector,
    useAccount,
    useConnect,
    useContract,
    useNetwork,
    useSigner,
    useSwitchNetwork
} from 'wagmi';
import { ZeroWalletSigner } from 'zero-wallet-wagmi-connector';
import { addressByChainId, contractAbi } from '../src/constants/contract';

import { chain as wagmiChain } from 'wagmi'

import { ScwContext } from './_app';
import Dropdown from '../src/components/Dropdown';
import { CHAIN_NAMES, DEFAULT_CHAIN, SupportedChainIds } from '../src/constants/chains';

export default function Home() {
    // context
    const { doesScwExist, setDoesScwExist } = useContext(ScwContext)!

    // state
    const [newNumber, setNewNumber] = useState<string>('');
    const [contractNumber, setContractNumber] = useState<number | null>(null);

    // wagmi hooks
    const { isLoading, error, switchNetworkAsync } = useSwitchNetwork()
    const { chain, chains } = useNetwork()
    const { address } = useAccount();
    const { data: signer } = useSigner<ZeroWalletSigner>();
    const { connect, connectors } = useConnect();
    const contractAddress = addressByChainId[chain?.id || DEFAULT_CHAIN]
    const contract = useContract({
        address: contractAddress,
        abi: contractAbi,
        signerOrProvider: signer
    });

    // chakra hooks
    const { setColorMode } = useColorMode();
    useEffect(() => {
        setColorMode('dark');
        // @ts-ignore
    }, []);

    useEffect(() => {
        console.log("scwAddress", signer?.scwAddress);
        // setDoesScwExist(!!signer?.scwAddress)
    }, [signer?.scwAddress])

    const handleConnect = async (connector: Connector) => {
        connect({ connector: connector });
    };

    useEffect(() => {
        console.log('getScwAddress', signer?.getScwAddress())
    }, [signer])

    useEffect(() => {
        const func = async () => {
            if (signer && !doesScwExist) {
                try {
                    try {
                        await signer.authorize()
                    } catch { }

                    await signer.deployScw()
                    setDoesScwExist(true)
                } catch { }
            }
        }

        func()
    }, [signer, doesScwExist, setDoesScwExist])

    useEffect(() => {
        console.log('chain changed', chain)
    }, [chain])

    const getContractNumber = async () => {
        if (!contract || !signer) return;
        try {
            const newContractNumber = await contract.value();
            setContractNumber(parseInt(newContractNumber));
        }
        catch { }
    };

    useEffect(() => {
        if (doesScwExist)
            getContractNumber()
    }, [doesScwExist])

    const handleSetNumber = async () => {
        if (!contract) return;
        const tx = await contract.set(parseInt(newNumber));
        await tx?.wait();
        await getContractNumber();
    };

    return (
        <Flex
            justifyContent="center"
            alignItems="center"
            direction='column'
            h="100vh"
            w="100vw"
        >
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {!signer ? (
                <ButtonGroup m={20}>
                    {connectors.map((connector, index) => (
                        <Button
                            key={index}
                            onClick={() => handleConnect(connector)}
                        >
                            Connect {connector.name}
                        </Button>
                    ))}
                </ButtonGroup>
            ) : (

                <Fragment>
                    <Dropdown
                        handleChange={async (newChain) => {
                            // console.log(switchNetwork, error, isLoading)
                            // console.log(chain)
                            console.log(newChain)
                            if (switchNetworkAsync)
                                await switchNetworkAsync(newChain.value)
                            else console.log('switchNetwork does not exist')
                            console.log('done')
                        }}

                        listItems={[wagmiChain.goerli, wagmiChain.optimism].map(chain => ({
                            value: chain.id,
                            label: chain.name
                        }))}

                        selectedItem={{
                            value: chain?.id ?? DEFAULT_CHAIN,
                            label: CHAIN_NAMES[(chain?.id as SupportedChainIds) ?? DEFAULT_CHAIN]
                        }}
                    />

                    <Flex m={20} alignItems="center" direction="column" gap={5}>
                        <Box>
                            Storage value:{' '}
                            {contractNumber ? contractNumber : 'loading...'}
                        </Box>
                        <Box>
                            Your SCW address: {signer.scwAddress}
                            <br />
                            Your zero wallet address: {address}
                        </Box>
                        <Flex gap={2}>
                            <Input
                                type="number"
                                value={newNumber}
                                onChange={(e) => setNewNumber(e.target.value)}
                            />
                            <Button onClick={handleSetNumber} padding="5">
                                Set Number
                            </Button>
                        </Flex>
                    </Flex>

                </Fragment>
            )}
        </Flex>
    );
}
